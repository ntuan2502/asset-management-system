# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Office {
  id: ID!
  name: String!
  internationalName: String!
  shortName: String!
  taxCode: String!
  address: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Department {
  id: ID!
  name: String!
  description: String
  office: Office!
}

type Role {
  id: ID!
  name: String!
  description: String
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  dob: DateTime
  gender: String
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [Role!]!
  office: Office
  department: Department
}

type PaginationMeta {
  totalCount: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
}

type UserConnection {
  nodes: [User!]!
  meta: PaginationMeta!
}

type RoleConnection {
  nodes: [Role!]!
  meta: PaginationMeta!
}

type DepartmentConnection {
  nodes: [Department!]!
  meta: PaginationMeta!
}

type OfficeConnection {
  nodes: [Office!]!
  meta: PaginationMeta!
}

type LoginResponse {
  access_token: String!
  refresh_token: String
}

type Session {
  id: ID!
  userAgent: String
  ipAddress: String
  expiresAt: DateTime!
  createdAt: DateTime!
}

type SessionConnection {
  nodes: [Session!]!
  meta: PaginationMeta!
}

type Permission {
  id: ID!
  action: String!
  subject: String!
}

type PermissionConnection {
  nodes: [Permission!]!
  meta: PaginationMeta!
}

type StatusLabel {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StatusLabelConnection {
  nodes: [StatusLabel!]!
  meta: PaginationMeta!
}

type Category {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategoryConnection {
  nodes: [Category!]!
  meta: PaginationMeta!
}

type Manufacturer {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ManufacturerConnection {
  nodes: [Manufacturer!]!
  meta: PaginationMeta!
}

type Query {
  hello: String!
  users(page: Int = 1, limit: Int = 10): UserConnection!
  user(id: ID!): User
  me: User!
  roles(page: Int = 1, limit: Int = 10): RoleConnection!
  role(id: ID!): Role
  departments(page: Int = 1, limit: Int = 10): DepartmentConnection!
  department(id: ID!): Department
  offices(page: Int = 1, limit: Int = 10): OfficeConnection!
  office(id: ID!): Office
  sessions(page: Int = 1, limit: Int = 10): SessionConnection!
  permissions(page: Int = 1, limit: Int = 10): PermissionConnection!
  statusLabels(page: Int = 1, limit: Int = 10): StatusLabelConnection!
  statusLabel(id: ID!): StatusLabel
  Categories(page: Int = 1, limit: Int = 10): CategoryConnection!
  Category(id: ID!): Category
  Manufacturers(page: Int = 1, limit: Int = 10): ManufacturerConnection!
  Manufacturer(id: ID!): Manufacturer
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  restoreUser(id: ID!): Boolean!
  assignRoleToUser(userId: ID!, roleId: ID!): User!
  createRole(input: CreateRoleInput!): Role!
  updateRole(id: ID!, input: UpdateRoleInput!): Role!
  deleteRole(id: ID!): Boolean!
  restoreRole(id: ID!): Boolean!
  assignPermissionsToRole(roleId: ID!, input: AssignPermissionsToRoleInput!): Role!
  createDepartment(input: CreateDepartmentInput!): Department!
  updateDepartment(id: ID!, input: UpdateDepartmentInput!): Department!
  deleteDepartment(id: ID!): Boolean!
  restoreDepartment(id: ID!): Boolean!
  createOffice(input: CreateOfficeInput!): Office!
  updateOffice(id: ID!, input: UpdateOfficeInput!): Office!
  deleteOffice(id: ID!): Boolean!
  login(input: LoginUserInput!): LoginResponse!
  refreshToken(refresh_token: String!): LoginResponse!
  logout: Boolean!
  logoutAll: Boolean!
  createStatusLabel(input: CreateStatusLabelInput!): StatusLabel!
  updateStatusLabel(id: ID!, input: UpdateStatusLabelInput!): StatusLabel!
  deleteStatusLabel(id: ID!): Boolean!
  createCategory(input: CreateCategoryInput!): Category!
  updateCategory(id: ID!, input: UpdateCategoryInput!): Category!
  deleteCategory(id: ID!): Boolean!
  createManufacturer(input: CreateManufacturerInput!): Manufacturer!
  updateManufacturer(id: ID!, input: UpdateManufacturerInput!): Manufacturer!
  deleteManufacturer(id: ID!): Boolean!
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  dob: DateTime
  gender: GenderEnum

  """ID of the office the user belongs to"""
  officeId: ID

  """ID of the department the user belongs to"""
  departmentId: ID
}

"""The gender of the user."""
enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

input UpdateUserInput {
  firstName: String
  lastName: String
  dob: DateTime
  gender: GenderEnum

  """ID of the new office for the user"""
  officeId: ID

  """ID of the new department for the user"""
  departmentId: ID
}

input CreateRoleInput {
  name: String!
  description: String
}

input UpdateRoleInput {
  name: String
  description: String
}

input AssignPermissionsToRoleInput {
  permissionIds: [ID!]!
}

input CreateDepartmentInput {
  name: String!
  officeId: ID!
  description: String
}

input UpdateDepartmentInput {
  name: String
  description: String
}

input CreateOfficeInput {
  name: String!
  internationalName: String!
  shortName: String!
  taxCode: String!
  address: String!
  description: String
}

input UpdateOfficeInput {
  name: String
  internationalName: String
  shortName: String
  taxCode: String
  address: String
  description: String
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateStatusLabelInput {
  name: String!
}

input UpdateStatusLabelInput {
  name: String
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String
}

input CreateManufacturerInput {
  name: String!
}

input UpdateManufacturerInput {
  name: String
}
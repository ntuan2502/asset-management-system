// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tạo một enum cho Gender để đảm bảo tính nhất quán
enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String // THÊM MỚI: Lưu trữ mật khẩu đã được hash
  firstName String
  lastName  String
  dob       DateTime? // THÊM MỚI: Date of Birth, optional
  gender    Gender? // THÊM MỚI: Dùng Enum, optional

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // THÊM MỚI: Dùng cho soft delete, optional

  roles    Role[]    @relation("UserRoles")
  sessions Session[]

  officeId String?
  office   Office? @relation(fields: [officeId], references: [id])

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
}

// Model để lưu trữ các sự kiện một cách bất biến (append-only)
model Event {
  id            String   @id @default(cuid())
  aggregateId   String // ID của đối tượng mà sự kiện này thuộc về (ví dụ: userId)
  aggregateType String // Loại đối tượng (ví dụ: "User", "Asset")
  eventType     String // Tên của sự kiện (ví dụ: "UserCreatedEvent")
  payload       Json // Dữ liệu chi tiết của sự kiện dưới dạng JSON
  version       Int // Phiên bản của sự kiện cho một aggregate cụ thể
  createdAt     DateTime @default(now())

  // Đảm bảo mỗi phiên bản của một aggregate là duy nhất, ngăn chặn race condition
  @@unique([aggregateId, version])
  // Tăng tốc độ truy vấn các sự kiện cho một aggregate
  @@index([aggregateId])
}

model Snapshot {
  id            String @id @default(cuid())
  aggregateId   String // ID của đối tượng (vd: userId)
  aggregateType String // Loại đối tượng (vd: "User")
  version       Int // Phiên bản của aggregate tại thời điểm snapshot
  payload       Json // Toàn bộ trạng thái của aggregate dưới dạng JSON

  @@unique([aggregateId, version]) // Đảm bảo snapshot cho một version là duy nhất
  @@index([aggregateId])
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users User[] @relation("UserRoles")

  permissions Permission[] @relation("RolePermissions")
}

model Permission {
  id      String @id @default(cuid())
  action  String // vd: "create", "read", "update", "delete"
  subject String // vd: "Asset", "User"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[] @relation("RolePermissions")

  @@unique([action, subject]) // Đảm bảo mỗi quyền là duy nhất
}

model Session {
  id                 String   @id @default(cuid())
  hashedRefreshToken String? // Lưu refresh token đã được hash, tùy chọn
  userAgent          String? // Thông tin trình duyệt
  ipAddress          String? // Địa chỉ IP
  expiresAt          DateTime // Thời điểm refresh token hết hạn
  createdAt          DateTime @default(now())

  revokedAt         DateTime?
  lastAccessTokenId String?

  // Mối quan hệ: Mỗi Session thuộc về một User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Office {
  id                String  @id @default(cuid())
  name              String // Tên
  internationalName String // Tên quốc tế
  shortName         String // Tên viết tắt
  taxCode           String // Mã số thuế
  address           String
  description       String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users       User[]
  departments Department[]

  @@index([internationalName])
  @@index([shortName])
  @@index([taxCode])
}

model Department {
  id          String  @id @default(cuid())
  name        String
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  officeId String
  office   Office @relation(fields: [officeId], references: [id])
  users    User[]

  @@unique([name, officeId])
}
